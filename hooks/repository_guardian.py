#!/usr/bin/env python3
"""
üõ°Ô∏è REPOSITORY GUARDIAN - Prote√ß√£o contra dele√ß√µes acidentais
Previne dele√ß√µes de arquivos cr√≠ticos e opera√ß√µes destrutivas
Hook Type: PreToolUse
"""

import json
import sys
import os
from pathlib import Path
from typing import List, Set, Tuple

# Arquivos/pastas que NUNCA devem ser deletados
PROTECTED_ITEMS = [
    # Git
    ".git",
    ".github",
    ".gitignore",
    ".gitattributes",
    
    # Environment & Config
    ".env",
    ".env.example",
    ".env.production",
    ".env.development",
    
    # Documentation
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "CONTRIBUTING.md",
    "CODE_OF_CONDUCT.md",
    
    # Python
    "requirements.txt",
    "requirements-dev.txt",
    "setup.py",
    "setup.cfg",
    "pyproject.toml",
    "poetry.lock",
    "Pipfile",
    "Pipfile.lock",
    
    # JavaScript/Node
    "package.json",
    "package-lock.json",
    "yarn.lock",
    "pnpm-lock.yaml",
    
    # Docker
    "docker-compose.yml",
    "docker-compose.yaml",
    "docker-compose.prod.yml",
    "docker-compose.dev.yml",
    "Dockerfile",
    "Dockerfile.prod",
    "Dockerfile.dev",
    ".dockerignore",
    
    # Database
    "alembic.ini",
    "migrations/",
    "alembic/",
    
    # Core directories
    "app/",
    "src/",
    "core/",
    "api/",
    "models/",
    "services/",
    "repositories/",
    "controllers/",
    "tests/",
    "test/",
    
    # Configuration
    "config/",
    ".vscode/",
    ".idea/",
    
    # CI/CD
    ".circleci/",
    ".travis.yml",
    ".gitlab-ci.yml",
    "azure-pipelines.yml",
    ".jenkins",
    
    # Security
    "hooks/",
    ".claude/",
    "guardian_config.json",
    
    # Certificates and keys (should never be in repo, but if they are...)
    "*.pem",
    "*.key",
    "*.crt",
    "*.p12",
]

# Padr√µes perigosos de dele√ß√£o
DANGEROUS_PATTERNS = [
    "*",
    ".",
    "./*",
    "**/*",
    "../*",
    "~/*",
    "/",
]

# Comandos bash perigosos
DANGEROUS_COMMANDS = [
    # Dele√ß√£o massiva
    ("rm -rf", "Deleta recursivamente sem confirma√ß√£o"),
    ("rm -fr", "Deleta recursivamente sem confirma√ß√£o"),
    ("rm -Rf", "Deleta recursivamente sem confirma√ß√£o"),
    
    # Git perigoso
    ("git clean -fdx", "Remove TODOS os arquivos n√£o rastreados, incluindo .gitignore"),
    ("git clean -ffdx", "For√ßa remo√ß√£o de todos os arquivos"),
    ("git reset --hard HEAD~", "Perde commits permanentemente"),
    ("git push --force", "Pode destruir hist√≥rico remoto"),
    ("git push -f", "Pode destruir hist√≥rico remoto"),
    
    # Permiss√µes perigosas
    ("chmod -R 000", "Remove todas as permiss√µes"),
    ("chmod -R 777", "Permiss√µes inseguras para todos"),
    ("chown -R", "Muda propriet√°rio recursivamente"),
    
    # Find destrutivo
    ("find . -delete", "Deleta tudo que encontrar"),
    ("find / -delete", "EXTREMAMENTE perigoso"),
    ("find . -exec rm", "Deleta via find"),
    
    # Disk operations
    ("dd if=/dev/zero", "Pode sobrescrever disco"),
    ("dd of=/", "Escrita direta no sistema"),
    ("mkfs", "Formata parti√ß√µes"),
    
    # Truncate
    ("> /dev/null 2>&1", "Pode esconder erros cr√≠ticos"),
    ("truncate -s 0", "Esvazia arquivos"),
    
    # System
    ("shutdown", "Desliga o sistema"),
    ("reboot", "Reinicia o sistema"),
    ("systemctl stop", "Para servi√ßos"),
    ("kill -9", "For√ßa t√©rmino de processos"),
    ("pkill", "Mata processos por nome"),
    ("killall", "Mata todos os processos"),
]


class RepositoryGuardian:
    """Guardi√£o do reposit√≥rio contra opera√ß√µes destrutivas"""
    
    def __init__(self):
        self.protected_items = set(PROTECTED_ITEMS)
        self.dangerous_patterns = set(DANGEROUS_PATTERNS)
        
    def check_bash_command(self, command: str) -> Tuple[bool, str]:
        """Verifica comandos bash perigosos"""
        command_lower = command.lower().strip()
        
        # Verifica comandos perigosos conhecidos
        for danger_cmd, description in DANGEROUS_COMMANDS:
            if danger_cmd in command_lower:
                # Verifica se afeta itens protegidos
                for protected in self.protected_items:
                    if protected in command:
                        return False, f"""
üö® OPERA√á√ÉO EXTREMAMENTE PERIGOSA DETECTADA!

Comando: {command}
Tipo: {description}
Item protegido: {protected}

Este comando poderia DESTRUIR seu reposit√≥rio!

üõ°Ô∏è ALTERNATIVAS SEGURAS:
- Use 'git stash' para salvar mudan√ßas temporariamente
- Use 'git clean -fd' (sem x) para limpar apenas untracked files
- Delete arquivos espec√≠ficos ao inv√©s de usar wildcards
- Fa√ßa backup antes de opera√ß√µes destrutivas

Se REALMENTE precisar executar:
1. Fa√ßa backup completo primeiro: tar -czf backup.tar.gz .
2. Verifique com 'ls' o que ser√° afetado
3. Use comandos mais espec√≠ficos e seguros
"""
                
                # Verifica padr√µes perigosos mesmo sem item protegido espec√≠fico
                for pattern in self.dangerous_patterns:
                    if pattern in command and pattern != ".":
                        return False, f"""
‚ö†Ô∏è COMANDO PERIGOSO COM WILDCARD!

Comando: {command}
Padr√£o perigoso: {pattern}

Este comando pode deletar M√öLTIPLOS arquivos ou TODO o reposit√≥rio!

üõ°Ô∏è SEJA MAIS ESPEC√çFICO:
‚ùå rm -rf *
‚úÖ rm -rf build/ dist/

‚ùå find . -delete  
‚úÖ find . -name "*.pyc" -delete

‚ùå git clean -fdx
‚úÖ git clean -fd

üí° DICA: Use 'ls' ou 'find' primeiro para ver o que ser√° afetado.
"""
                
                # Comando perigoso gen√©rico
                return False, f"""
‚ö†Ô∏è COMANDO POTENCIALMENTE PERIGOSO!

Comando: {command}
Tipo: {description}

üõ°Ô∏è RECOMENDA√á√ïES:
1. Verifique exatamente o que ser√° afetado
2. Considere alternativas mais seguras
3. Fa√ßa backup se necess√°rio
4. Use flags mais seguras quando poss√≠vel

Tem certeza que deseja continuar? Revise o comando cuidadosamente.
"""
        
        return True, ""
    
    def check_file_deletion(self, files: List[str]) -> Tuple[bool, str]:
        """Verifica tentativas de deletar arquivos protegidos"""
        protected_hits = []
        
        for file in files:
            file_path = Path(file)
            
            # Verifica match exato
            if file in self.protected_items:
                protected_hits.append((file, "arquivo/pasta cr√≠tico"))
                continue
            
            # Verifica se √© subpasta de item protegido
            for protected in self.protected_items:
                if file.startswith(f"{protected}/") or str(file_path).startswith(f"{protected}/"):
                    protected_hits.append((file, f"parte de {protected}"))
                    continue
                
                # Verifica wildcards em nomes protegidos
                if protected.endswith("/") and file.startswith(protected.rstrip("/")):
                    protected_hits.append((file, f"pasta cr√≠tica {protected}"))
        
        if protected_hits:
            files_list = "\n".join([f"‚ùå {f} ({reason})" for f, reason in protected_hits[:10]])
            more_msg = f"\n... e mais {len(protected_hits) - 10} arquivos" if len(protected_hits) > 10 else ""
            
            return False, f"""
üõ°Ô∏è ARQUIVOS PROTEGIDOS DETECTADOS!

Tentativa de deletar {len(protected_hits)} arquivo(s) cr√≠tico(s):

{files_list}{more_msg}

Estes arquivos/pastas s√£o ESSENCIAIS para o funcionamento do projeto.

üîß ALTERNATIVAS:
- Use 'Edit' para modificar arquivos ao inv√©s de deletar
- Use 'git checkout' para reverter mudan√ßas
- Crie backups antes de grandes mudan√ßas
- Seja espec√≠fico sobre o que realmente precisa remover

‚ö†Ô∏è Dele√ß√£o bloqueada por seguran√ßa.
"""
        
        return True, ""
    
    def is_mass_deletion(self, files: List[str]) -> Tuple[bool, str]:
        """Detecta tentativas de dele√ß√£o em massa"""
        total_files = len(files)
        
        # Dele√ß√£o direta de muitos arquivos
        if total_files > 10:
            return True, f"Tentando deletar {total_files} arquivos de uma vez"
        
        # Verifica se est√° deletando pastas com muitos arquivos
        total_affected = 0
        large_dirs = []
        
        for file in files:
            if os.path.isdir(file):
                try:
                    file_count = sum(1 for _ in Path(file).rglob("*"))
                    total_affected += file_count
                    
                    if file_count > 20:
                        large_dirs.append((file, file_count))
                except:
                    pass
        
        if total_affected > 50 or large_dirs:
            details = "\n".join([f"üìÅ {d} ({c} arquivos)" for d, c in large_dirs[:5]])
            return True, f"""
Total de arquivos afetados: {total_affected}

Pastas grandes:
{details}

Isso parece uma dele√ß√£o em massa!
"""
        
        return False, ""
    
    def analyze_operation(self, data: dict) -> Tuple[bool, str]:
        """Analisa a opera√ß√£o e retorna (permitir, mensagem)"""
        tool = data.get("tool", "")
        
        if tool not in ["Bash", "Delete", "MultiDelete", "Move"]:
            return True, ""
        
        params = data.get("parameters", {})
        
        # An√°lise de comandos Bash
        if tool == "Bash":
            command = params.get("command", "")
            return self.check_bash_command(command)
        
        # An√°lise de Delete/MultiDelete
        elif tool in ["Delete", "MultiDelete"]:
            files = params.get("files", [])
            if not files and params.get("file"):
                files = [params.get("file")]
            
            # Verifica arquivos protegidos
            allowed, msg = self.check_file_deletion(files)
            if not allowed:
                return False, msg
            
            # Verifica dele√ß√£o em massa
            is_mass, mass_msg = self.is_mass_deletion(files)
            if is_mass:
                files_preview = "\n".join([f"- {f}" for f in files[:10]])
                more = f"\n... e mais {len(files) - 10} arquivos" if len(files) > 10 else ""
                
                return False, f"""
üö® DELE√á√ÉO EM MASSA DETECTADA!

{mass_msg}

Arquivos marcados para dele√ß√£o:
{files_preview}{more}

üõ°Ô∏è PR√ÅTICAS SEGURAS:
1. Delete em pequenos grupos (max 10 arquivos)
2. Use 'git clean' para arquivos n√£o rastreados
3. Use 'git checkout' para reverter mudan√ßas
4. Revise a lista antes de confirmar

‚ö†Ô∏è Por seguran√ßa, esta opera√ß√£o foi bloqueada.
"""
        
        # An√°lise de Move (pode ser usado para "deletar" movendo para /tmp ou /dev/null)
        elif tool == "Move":
            source = params.get("source", "")
            destination = params.get("destination", "")
            
            dangerous_destinations = ["/tmp", "/dev/null", "/dev/zero", "~/.Trash"]
            
            for protected in self.protected_items:
                if source == protected or source.startswith(f"{protected}/"):
                    for danger in dangerous_destinations:
                        if danger in destination:
                            return False, f"""
üö® TENTATIVA DE MOVER ARQUIVO PROTEGIDO PARA LIXEIRA!

Origem: {source} (PROTEGIDO)
Destino: {destination}

Isso √© equivalente a DELETAR o arquivo!

Use opera√ß√µes seguras ao inv√©s de mover para locais tempor√°rios.
"""
        
        return True, ""


def main():
    """Hook principal"""
    try:
        # L√™ dados do stdin
        data = json.load(sys.stdin)
        
        # Cria o guardi√£o
        guardian = RepositoryGuardian()
        
        # Analisa a opera√ß√£o
        allowed, message = guardian.analyze_operation(data)
        
        if not allowed:
            # Bloqueia a opera√ß√£o
            print(json.dumps({
                "action": "block",
                "reason": message
            }))
            sys.exit(2)
        
        # Permite a opera√ß√£o
        sys.exit(0)
        
    except json.JSONDecodeError:
        # Input inv√°lido, permite opera√ß√£o por seguran√ßa
        sys.exit(0)
    except Exception as e:
        # Em caso de erro, permite opera√ß√£o (fail open)
        # mas loga o erro
        print(f"Repository Guardian Error: {e}", file=sys.stderr)
        sys.exit(0)


if __name__ == "__main__":
    main()